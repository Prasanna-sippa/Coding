Observation:
1.if sorted array rotated means sorted means every element is in increasing order means greater then its left but if rotated than one element is less than its left so we ahve to find thst one element
2.if we select one element it divides array into 2 parts so one part is sorted and another is unsorted so our ans lies in unsorted part
edge case:what if out ans is in 0th index (means array is sorted but not rotated)
input:
2 3 4 5 6 1


class Solution {
public:
    int findMin(vector<int>& nums) {
        int left=0,right=nums.size()-1,mid;
        int n=nums.size();
        while(left<=right){
            int mid=left+(right-left)/2;
            if(mid>0 && nums[mid]<nums[mid-1]){
                return nums[mid];
            }
            else if(nums[left]>nums[mid]){
                right=mid-1;
            }
            else if(nums[mid]>nums[right]){
                left=mid+1;
            }
            else {
                return nums[left];
            }
            
        }
        return -1;
    }
};



after adding edgecase:

class Solution {
public:
    int findMin(vector<int>& nums) {
        int left=0,right=nums.size()-1,mid;
        int n=nums.size();
        while(left<=right){
            int mid=left+(right-left)/2;
            if(mid>0 && nums[mid]<nums[mid-1]){
                return nums[mid];
            }
            else if(nums[left]>nums[mid]){
                right=mid-1;
            }
            else if(nums[mid]>nums[right]){
                left=mid+1;
            }
            else if(mid == 0 || (nums[mid-1] > nums[mid])){
                return nums[mid];
            }
          
            else {
                return nums[left];
            }
            
        }
        return -1;
    }
};




          
