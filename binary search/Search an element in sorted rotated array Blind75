Observation:
1.if we pic a element one side of it sorted and other side is unsorted
so check the left and right elements to check the part is sorted or not if its sorted then check for target is lies in left part or right and update left,right based on that

class Solution {
public:
    int search(vector<int>& nums, int target) {
         int left=0,right=nums.size()-1,mid;
        int n=nums.size();
        while(left<=right){
            int mid=left+(right-left)/2;
            if(nums[mid]==target){
                return mid;
            }
            //right part sorted
           if(nums[mid]<nums[right]){ 
               if(target>nums[mid] && target<=nums[right]){
                   left=mid+1;
               }
               else{
                   right=mid-1;
               }
                
            }
            else{
                if(target>=nums[left] && target<nums[mid]){
                    right=mid-1;
                }
                else{
                    left=mid+1;
                }
            }
        }
        return -1;
    }
};





search in sorted and rotated II: means above with duplicates:

class Solution {
public:
    bool search(vector<int>& nums, int target) {
         int l = 0;
        int r = nums.size() - 1;
        
        while(l <= r)
        {
            int mid = l + (r-l) / 2;
            if (nums[mid] == target)
                return true;
			// with duplicates we can have this contdition, just update left & right
            if((nums[l] == nums[mid]) && (nums[r] == nums[mid]))
            {
                l++;
                r--;
            }
			// first half
			// first half is in order
            else if(nums[l] <= nums[mid])
            {
				// target is in first  half
                if((nums[l] <= target) && (nums[mid] > target))
                    r = mid - 1;
                else
                    l = mid + 1;
            }
			// second half
			// second half is order
			// target is in second half
            else
            {
                if((nums[mid] < target) && (nums[r]>= target))
                    l = mid + 1;
                else
                    r = mid - 1;
            }
        }
        return false;
    }
};
