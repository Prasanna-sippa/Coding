Observation:
1.if we pic a element one side of it sorted and other side is unsorted
so check the left and right elements to check the part is sorted or not if its sorted then check for target is lies in left part or right and update left,right based on that

class Solution {
public:
    int search(vector<int>& nums, int target) {
         int left=0,right=nums.size()-1,mid;
        int n=nums.size();
        while(left<=right){
            int mid=left+(right-left)/2;
            if(nums[mid]==target){
                return mid;
            }
            //right part sorted
           if(nums[mid]<nums[right]){ 
               if(target>nums[mid] && target<=nums[right]){
                   left=mid+1;
               }
               else{
                   right=mid-1;
               }
                
            }
            else{
                if(target>=nums[left] && target<nums[mid]){
                    right=mid-1;
                }
                else{
                    left=mid+1;
                }
            }
        }
        return -1;
    }
};



